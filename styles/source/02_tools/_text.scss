// * -- Text (Tools) -- *

//  Text size generator
//  ====================================== */
@mixin text-size-generator($txt-size, $breakpoints, $is-important: null) {
    $important: function-set-important($is-important);

    // Get first and last breakpoint
    $bp-first:  0;
    $bp-last:   0;

    @each $bp, $breakpoint in $breakpoints {
    
        // Breakpoint data
        $breakpoint-index:  index(($breakpoints), ($bp $breakpoint));
        $breakpoint-width:  map-get($breakpoint, width);

        @if ($breakpoint-index == 2) {
            $bp-first: $breakpoint-width;
        } @else if ($breakpoint-index == length($breakpoints)) {
            $bp-last: $breakpoint-width;
        }
    }

    // Min sizes
    $min:       map-get($txt-size, min);
    $min-size:  map-get($min, size);
    $min-line:  map-get($min, line);

    // Max sizes
    $max:       map-get($txt-size, max);
    $max-size:  map-get($max, size);
    $max-line:  map-get($max, line);

    // Font-size map
    $font-size-map:     ($bp-first: $min-size, $bp-last: $max-size);

    // Generate props
    font-size: $min-size #{$important};

    @media (min-width: $bp-first) {
        font-size:      function-linear-interpolation($font-size-map);
        line-height:    $max-line #{$important};
    }

    @media (min-width: $bp-last) {
        font-size:      $max-size #{$important};
    }
}

//  Text size generator for all sizes
//  ====================================== */
@mixin text-size-generator-all($class-name, $txt-sizes, $breakpoints, $is-important: null) {
    $important: function-set-important($is-important);

    // Get first and last breakpoint
    $bp-first:  0;
    $bp-last:   0;

    @each $bp, $breakpoint in $breakpoints {
    
        // Breakpoint data
        $breakpoint-index:  index(($breakpoints), ($bp $breakpoint));
        $breakpoint-width:  map-get($breakpoint, width);

        @if ($breakpoint-index == 2) {
            $bp-first: $breakpoint-width;
        } @else if ($breakpoint-index == length($breakpoints)) {
            $bp-last: $breakpoint-width;
        }
    }

    @each $name, $size in $txt-sizes {

        // Name
        $size-name: map-get($size, name);

        // Min sizes
        $min:       map-get($size, min);
        $min-size:  map-get($min, size);
        $min-line:  map-get($min, line);

        // Max sizes
        $max:       map-get($size, max);
        $max-size:  map-get($max, size);
        $max-line:  map-get($max, line);

        // Font-size map
        $font-size-map:     ($bp-first: $min-size, $bp-last: $max-size);

        // Generate props
        .#{$class-name}-#{$size-name} {
            font-size: $min-size #{$important};

            @media (min-width: $bp-first) {
                font-size:      function-linear-interpolation($font-size-map) #{$important};
                line-height:    $max-line #{$important};
            }

            @media (min-width: $bp-last) {
                font-size:      $max-size #{$important};
            }
        }
    }
}

//  Typography
//  ====================================== */
@mixin text-typography-1($is-important: null) {
    $important: function-set-important($is-important);

    font-family: map-get($base-typography, 1), Verdana, Geneva, Tahoma, sans-serif #{$important};
}

@mixin text-typography-2($is-important: null) {
    $important: function-set-important($is-important);

    font-family: map-get($base-typography, 2), Georgia, "Times New Roman", Times, serif #{$important};
}

@mixin text-typography-3($is-important: null) {
    $important: function-set-important($is-important);

    font-family: map-get($base-typography, 3) #{$important};
}

@mixin text-typography-4($is-important: null) {
    $important: function-set-important($is-important);

    font-family: map-get($base-typography, 4), "Courier New", Courier, monospace #{$important};
}

//  Text styles
//  ====================================== */
@mixin text-style-h1 {
    //margin-top:     1.5rem;
    margin-top:     0;
    margin-bottom:  1rem;
    @include text-size-generator(map-get($base-text-sizes, xl), $base-breakpoints);
}

@mixin text-style-h2 {
    //margin-top:     1rem;
    margin-top:     0;
    margin-bottom:  1rem;
    font-weight:    600;
    @include text-size-generator(map-get($base-text-sizes, lg), $base-breakpoints);
}

@mixin text-style-h3 {
    //margin-top:     1rem;
    margin-top:     0;
    margin-bottom:  1rem;
    font-weight:    600;
    @include text-size-generator(map-get($base-text-sizes, md), $base-breakpoints);
}

@mixin text-style-h4 {
    //margin-top:     1rem;
    margin-top:     0;
    font-weight:    700;
    margin-bottom:  1rem;
    @include text-size-generator(map-get($base-text-sizes, sm), $base-breakpoints);
}

@mixin text-style-h5 {
    margin-top:     0;
    margin-bottom:  1rem;
    @include text-size-generator(map-get($base-text-sizes, xs), $base-breakpoints);
}

@mixin text-style-h6 {
    margin-top:     0;
    margin-bottom:  1rem;
    font-weight:    600;
    @include text-size-generator(map-get($base-text-sizes, xxs), $base-breakpoints);
}

@mixin text-style-paragraph {
    margin-top:     0;
    margin-bottom:  1rem;
    @include text-size-generator(map-get($base-text-sizes, xs), $base-breakpoints);
}

@mixin text-style-code {
    //padding:            0 map-get(map-get($base-gutters, xxs), value);
    //border-radius:      map-get(map-get($base-border-radius, xxs), value);
    //background-color:   rgba(map-get(map-get($base-colors, default), color), 0.05);
    font-family: "Menlo", "Consolas", "Courier New", Courier, monospace;
    @include text-size-generator(map-get($base-text-sizes, xxs), $base-breakpoints);
    //@include text-typography-4;
}

@mixin text-style-mark {
    padding:            0 map-get(map-get($base-gutters, xxs), value);
    border-radius:      map-get(map-get($base-border-radius, xxs), value);
    //background-color:   rgba(map-get(map-get($base-colors, warning), color), 0.1);
}

@mixin text-style-link {
    color:              map-get(map-get(map-get($base-colors, primary-blue), onlight), background);
    box-shadow:         inset 0 -4px 0 rgba(map-get(map-get(map-get($base-colors, primary-blue), onlight), background), 0.5);
    text-decoration:    none;
}